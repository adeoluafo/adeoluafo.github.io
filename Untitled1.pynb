{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMSSzF/ta+h3UuZQNzdbAVm",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/adeoluafo/adeoluafo.github.io/blob/main/Untitled1.pynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tlLn0mPXCaJe",
        "outputId": "1d15d5f5-b522-4974-cce2-2770da69553c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting ColabTurtlePlus\n",
            "  Downloading ColabTurtlePlus-2.0.1-py3-none-any.whl.metadata (10 kB)\n",
            "Downloading ColabTurtlePlus-2.0.1-py3-none-any.whl (31 kB)\n",
            "Installing collected packages: ColabTurtlePlus\n",
            "Successfully installed ColabTurtlePlus-2.0.1\n"
          ]
        }
      ],
      "source": [
        "!pip install ColabTurtlePlus"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from ColabTurtlePlus.Turtle import *\n",
        "clearscreen()\n",
        "setup(300,300)\n",
        "shape(\"turtle\")\n",
        "forward(100)\n",
        "left(90)\n",
        "forward(100)\n",
        "left(90)\n",
        "forward(100)\n",
        "left(90)\n",
        "forward(100)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 321
        },
        "id": "UZiD1DgBC88-",
        "outputId": "339ccc10-14c6-469f-a6f7-8bf2c95a8a42"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "      <svg width=\"300\" height=\"300\">  \n",
              "        <rect width=\"100%\" height=\"100%\" style=\"fill:white;stroke:;stroke-width:1\"/>\n",
              "        \n",
              "        \n",
              "        <line x1=\"150.0\" y1=\"150.0\" x2=\"250.0\" y2=\"150.0\" stroke-linecap=\"round\" style=\"stroke:black;stroke-width:1\" /><line x1=\"250.0\" y1=\"150.0\" x2=\"250.0\" y2=\"50.0\" stroke-linecap=\"round\" style=\"stroke:black;stroke-width:1\" /><line x1=\"250.0\" y1=\"50.0\" x2=\"150.0\" y2=\"50.0\" stroke-linecap=\"round\" style=\"stroke:black;stroke-width:1\" /><line x1=\"150.0\" y1=\"50.0\" x2=\"150.0\" y2=\"60.0\" stroke-linecap=\"round\" style=\"stroke:black;stroke-width:1\" /><line x1=\"150.0\" y1=\"60.0\" x2=\"150.0\" y2=\"70.0\" stroke-linecap=\"round\" style=\"stroke:black;stroke-width:1\" /><line x1=\"150.0\" y1=\"70.0\" x2=\"150.0\" y2=\"80.0\" stroke-linecap=\"round\" style=\"stroke:black;stroke-width:1\" /><line x1=\"150.0\" y1=\"80.0\" x2=\"150.0\" y2=\"90.0\" stroke-linecap=\"round\" style=\"stroke:black;stroke-width:1\" /><line x1=\"150.0\" y1=\"90.0\" x2=\"150.0\" y2=\"100.0\" stroke-linecap=\"round\" style=\"stroke:black;stroke-width:1\" /><line x1=\"150.0\" y1=\"100.0\" x2=\"150.0\" y2=\"110.0\" stroke-linecap=\"round\" style=\"stroke:black;stroke-width:1\" /><line x1=\"150.0\" y1=\"110.0\" x2=\"150.0\" y2=\"120.0\" stroke-linecap=\"round\" style=\"stroke:black;stroke-width:1\" /><line x1=\"150.0\" y1=\"120.0\" x2=\"150.0\" y2=\"130.0\" stroke-linecap=\"round\" style=\"stroke:black;stroke-width:1\" /><line x1=\"150.0\" y1=\"130.0\" x2=\"150.0\" y2=\"140.0\" stroke-linecap=\"round\" style=\"stroke:black;stroke-width:1\" /><line x1=\"150.0\" y1=\"140.0\" x2=\"150.0\" y2=\"150.0\" stroke-linecap=\"round\" style=\"stroke:black;stroke-width:1\" />\n",
              "        \n",
              "        \n",
              "        <g id=\"turtle\" visibility=\"visible\" transform=\"rotate(180,150.0,150.0) translate(150.0, 150.0)\">\n",
              "<path style=\"stroke:black;fill-rule:evenodd;fill:black;fill-opacity:1;\" transform=\"skewX(0) scale(1,1)\" d=\"m 1.1536693,-18.56101 c -2.105469,1.167969 -3.203125,3.441407 -3.140625,6.5 l 0.011719,0.519532 -0.300782,-0.15625 c -1.308594,-0.671875 -2.828125,-0.824219 -4.378906,-0.429688 -1.9375,0.484375 -3.8906253,2.089844 -6.0117193,4.9257825 -1.332031,1.785156 -1.714843,2.644531 -1.351562,3.035156 l 0.113281,0.125 h 0.363281 c 0.71875,0 1.308594,-0.265625 4.6679693,-2.113282 1.199219,-0.660156 2.183594,-1.199218 2.191406,-1.199218 0.00781,0 -0.023437,0.089844 -0.074218,0.195312 -0.472657,1.058594 -1.046876,2.785156 -1.335938,4.042969 -1.054688,4.574219 -0.351562,8.453125 2.101562,11.582031 0.28125,0.355469 0.292969,0.253906 -0.097656,0.722656 -2.046875,2.4609375 -3.027344,4.8984375 -2.734375,6.8046875 0.050781,0.339844 0.042969,0.335938 0.679688,0.335938 2.023437,0 4.15625,-1.316407 6.21875,-3.835938 0.222656,-0.269531 0.191406,-0.261719 0.425781,-0.113281 0.730469,0.46875 2.460938,1.390625 2.613281,1.390625 0.160157,0 1.765625,-0.753906 2.652344,-1.246094 0.167969,-0.09375 0.308594,-0.164062 0.308594,-0.160156 0.066406,0.105468 0.761719,0.855468 1.085937,1.171875 1.613282,1.570312 3.339844,2.402343 5.3593747,2.570312 0.324219,0.02734 0.355469,0.0078 0.425781,-0.316406 0.375,-1.742187 -0.382812,-4.058594 -2.1445307,-6.5585935 l -0.320312,-0.457031 0.15625,-0.183594 c 3.2460927,-3.824218 3.4335927,-9.08593704 0.558593,-15.816406 l -0.050781,-0.125 1.7382807,0.859375 c 3.585938,1.773437 4.371094,2.097656 5.085938,2.097656 0.945312,0 0.75,-0.863281 -0.558594,-2.507812 C 11.458356,-11.838353 8.3333563,-13.268041 4.8607003,-11.721166 l -0.363281,0.164063 0.019531,-0.09375 c 0.121094,-0.550781 0.183594,-1.800781 0.121094,-2.378907 -0.203125,-1.867187 -1.035157,-3.199218 -2.695313,-4.308593 -0.523437,-0.351563 -0.546875,-0.355469 -0.789062,-0.222657\" />\n",
              "</g>\n",
              "      </svg>\n",
              "    "
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from ColabTurtlePlus.Turtle import *\n",
        "def drawSquare (x , y , length ):\n",
        "  penup() # raise the pen\n",
        "  goto(x,y) # move to starting position\n",
        "  setheading(0) # point turtle east\n",
        "  pendown() # lower the pen\n",
        "  for count in range(4): # draw the 4 sides\n",
        "    forward(length) # move forward length\n",
        "    right(90) # turn right 90 degrees\n",
        "speed(10) # drawing speed is 10\n",
        "pensize(5) # line width of 5 pixels\n",
        "pencolor(200,10,0)\n",
        "drawSquare(0, 0, 100 ) #square at (0,0)/side 100\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 321
        },
        "id": "MJUSxmDdEVJJ",
        "outputId": "60bb7893-93f8-4c01-d72c-7a72dc15ffd3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "      <svg width=\"300\" height=\"300\">  \n",
              "        <rect width=\"100%\" height=\"100%\" style=\"fill:white;stroke:;stroke-width:1\"/>\n",
              "        \n",
              "        \n",
              "        <line x1=\"150.0\" y1=\"150.0\" x2=\"250.0\" y2=\"150.0\" stroke-linecap=\"round\" style=\"stroke:rgb(200,10,0);stroke-width:5\" /><line x1=\"250.0\" y1=\"150.0\" x2=\"250.0\" y2=\"250.0\" stroke-linecap=\"round\" style=\"stroke:rgb(200,10,0);stroke-width:5\" /><line x1=\"250.0\" y1=\"250.0\" x2=\"150.0\" y2=\"250.0\" stroke-linecap=\"round\" style=\"stroke:rgb(200,10,0);stroke-width:5\" /><line x1=\"150.0\" y1=\"250.0\" x2=\"150.0\" y2=\"150.0\" stroke-linecap=\"round\" style=\"stroke:rgb(200,10,0);stroke-width:5\" />\n",
              "        \n",
              "        \n",
              "        <g id=\"classic\" visibility=\"visible\" transform=\"rotate(180,150.0,150.0) translate(150.0, 150.0)\">\n",
              "<polygon points=\"-5,-4.5 0,-2.5 5,-4.5 0,4.5\" transform=\"skewX(0) scale(1,1)\" style=\"stroke:rgb(200,10,0);fill:black;stroke-width:1\" />\n",
              "<animateTransform id = \"one\" attributeName=\"transform\" \n",
              "                      type=\"scale\"\n",
              "                      from=\"1 1\" to=\"1 1\"\n",
              "                      begin=\"0s\" dur=\"0.01s\"\n",
              "                      repeatCount=\"1\"\n",
              "                      additive=\"sum\"\n",
              "                      fill=\"freeze\"\n",
              "                /><animateTransform attributeName=\"transform\"\n",
              "                    type=\"rotate\"\n",
              "                    from=\"0 0 0\" to =\"90 0 0\"\n",
              "                    begin=\"one.end\" dur=\"0.08s\"\n",
              "                    repeatCount=\"1\"\n",
              "                    additive=\"sum\"\n",
              "                    fill=\"freeze\"\n",
              "                /></g>\n",
              "      </svg>\n",
              "    "
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "# Sample data\n",
        "x = [1, 2, 3, 4, 5, 6, 8, 11, 13, 14, 17, 19, 20]\n",
        "y = [2, 3, 5, 2, 11, 10, 11, 20, 16, 9, 13, 6, 16]\n",
        "# Create a line plot\n",
        "plt.plot(x, y, marker='o')\n",
        "# Add title and labels\n",
        "plt.title('Simple Line Plot')\n",
        "plt.xlabel('X-axis')\n",
        "plt.ylabel('Y-axis')\n",
        "# Show the plot\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "OMAEEGuCF2_H",
        "outputId": "2927aae6-39c4-46f7-b730-726e165d24e1",
        "collapsed": true
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "EhBKEHA_Hm55"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#To draw a star\n",
        "from ColabTurtlePlus.Turtle import *\n",
        "clearscreen()\n",
        "def drawStar (x , y , length ):\n",
        "  penup()\n",
        "  goto(x,y)\n",
        "  setheading(0)\n",
        "  pendown()\n",
        "  for count in range(5): # draw the 5 sides\n",
        "    forward(length)\n",
        "    right(144) # turn right 144 degrees to get the corner angle\n",
        "speed(4)\n",
        "pensize(5)\n",
        "pencolor(200,10,0)\n",
        "drawStar(0, 0, 100 ) #star at (0,0)/side 10"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 621
        },
        "id": "Dyk-ccRap_qC",
        "outputId": "89b77745-4964-434f-f6b6-32ee6ff0be49"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "      <svg width=\"800\" height=\"600\">  \n",
              "        <rect width=\"100%\" height=\"100%\" style=\"fill:white;stroke:;stroke-width:1\"/>\n",
              "        \n",
              "        \n",
              "        <line x1=\"400.0\" y1=\"300.0\" x2=\"500.0\" y2=\"300.0\" stroke-linecap=\"round\" style=\"stroke:rgb(200,10,0);stroke-width:5\" /><line x1=\"500.0\" y1=\"300.0\" x2=\"419.098\" y2=\"358.779\" stroke-linecap=\"round\" style=\"stroke:rgb(200,10,0);stroke-width:5\" /><line x1=\"419.098\" y1=\"358.779\" x2=\"450.0\" y2=\"263.673\" stroke-linecap=\"round\" style=\"stroke:rgb(200,10,0);stroke-width:5\" /><line x1=\"450.0\" y1=\"263.673\" x2=\"480.902\" y2=\"358.779\" stroke-linecap=\"round\" style=\"stroke:rgb(200,10,0);stroke-width:5\" /><line x1=\"480.902\" y1=\"358.779\" x2=\"400.0\" y2=\"300.0\" stroke-linecap=\"round\" style=\"stroke:rgb(200,10,0);stroke-width:5\" />\n",
              "        \n",
              "        \n",
              "        <g id=\"classic\" visibility=\"visible\" transform=\"rotate(126,400.0,300.0) translate(400.0, 300.0)\">\n",
              "<polygon points=\"-5,-4.5 0,-2.5 5,-4.5 0,4.5\" transform=\"skewX(0) scale(1,1)\" style=\"stroke:rgb(200,10,0);fill:black;stroke-width:1\" />\n",
              "<animateTransform id = \"one\" attributeName=\"transform\" \n",
              "                      type=\"scale\"\n",
              "                      from=\"1 1\" to=\"1 1\"\n",
              "                      begin=\"0s\" dur=\"0.01s\"\n",
              "                      repeatCount=\"1\"\n",
              "                      additive=\"sum\"\n",
              "                      fill=\"freeze\"\n",
              "                /><animateTransform attributeName=\"transform\"\n",
              "                    type=\"rotate\"\n",
              "                    from=\"0 0 0\" to =\"144 0 0\"\n",
              "                    begin=\"one.end\" dur=\"0.4799999999999999s\"\n",
              "                    repeatCount=\"1\"\n",
              "                    additive=\"sum\"\n",
              "                    fill=\"freeze\"\n",
              "                /></g>\n",
              "      </svg>\n",
              "    "
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from ColabTurtlePlus.Turtle import *\n",
        "clearscreen()\n",
        "def drawHexagon(x , y , length ):\n",
        "  penup()\n",
        "  goto(x,y)\n",
        "  setheading(0)\n",
        "  pendown()\n",
        "  for count in range(6): # draw the 6 sides\n",
        "    forward(length)\n",
        "    right(100) # turn right 100 degrees to get the corner angle\n",
        "    left(40)\n",
        "speed(4)\n",
        "pensize(5)\n",
        "write(\"HEX CSC 2002\", font=(\"Arial\", 16, \"bold\"))\n",
        "\n",
        "\n",
        "pencolor(200,10,0)\n",
        "drawHexagon(0, 0, 100) #star at (0,0)/side 10"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 621
        },
        "id": "RVJo8MtzKXDn",
        "outputId": "1860efd7-6f84-42b4-ddff-8f1ec03bd8d0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "      <svg width=\"800\" height=\"600\">  \n",
              "        <rect width=\"100%\" height=\"100%\" style=\"fill:white;stroke:;stroke-width:1\"/>\n",
              "        \n",
              "        \n",
              "        <text x=\"400.0\" y=\"300.0\" fill=\"black\" text-anchor=\"start\" style=\"font-size:16px;font-family:'Arial';font-weight:bold;\">HEX CSC 2002</text><line x1=\"400.0\" y1=\"300.0\" x2=\"500.0\" y2=\"300.0\" stroke-linecap=\"round\" style=\"stroke:rgb(200,10,0);stroke-width:5\" /><line x1=\"500.0\" y1=\"300.0\" x2=\"550.0\" y2=\"386.603\" stroke-linecap=\"round\" style=\"stroke:rgb(200,10,0);stroke-width:5\" /><line x1=\"550.0\" y1=\"386.603\" x2=\"500.0\" y2=\"473.206\" stroke-linecap=\"round\" style=\"stroke:rgb(200,10,0);stroke-width:5\" /><line x1=\"500.0\" y1=\"473.206\" x2=\"400.0\" y2=\"473.206\" stroke-linecap=\"round\" style=\"stroke:rgb(200,10,0);stroke-width:5\" /><line x1=\"400.0\" y1=\"473.206\" x2=\"350.0\" y2=\"386.603\" stroke-linecap=\"round\" style=\"stroke:rgb(200,10,0);stroke-width:5\" /><line x1=\"350.0\" y1=\"386.603\" x2=\"400.0\" y2=\"300.0\" stroke-linecap=\"round\" style=\"stroke:rgb(200,10,0);stroke-width:5\" />\n",
              "        \n",
              "        \n",
              "        <g id=\"classic\" visibility=\"visible\" transform=\"rotate(-50,400.0,300.0) translate(400.0, 300.0)\">\n",
              "<polygon points=\"-5,-4.5 0,-2.5 5,-4.5 0,4.5\" transform=\"skewX(0) scale(1,1)\" style=\"stroke:rgb(200,10,0);fill:black;stroke-width:1\" />\n",
              "<animateTransform id = \"one\" attributeName=\"transform\" \n",
              "                      type=\"scale\"\n",
              "                      from=\"1 1\" to=\"1 1\"\n",
              "                      begin=\"0s\" dur=\"0.01s\"\n",
              "                      repeatCount=\"1\"\n",
              "                      additive=\"sum\"\n",
              "                      fill=\"freeze\"\n",
              "                /><animateTransform attributeName=\"transform\"\n",
              "                    type=\"rotate\"\n",
              "                    from=\"0 0 0\" to =\"-40 0 0\"\n",
              "                    begin=\"one.end\" dur=\"0.13333333333333333s\"\n",
              "                    repeatCount=\"1\"\n",
              "                    additive=\"sum\"\n",
              "                    fill=\"freeze\"\n",
              "                /></g>\n",
              "      </svg>\n",
              "    "
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from ColabTurtlePlus.Turtle import *\n",
        "clearscreen()\n",
        "def movef(x):#function to move the turtle forward without drawing\n",
        "  penup()\n",
        "  forward(x)\n",
        "  pendown()\n",
        "\n",
        "def moveb(x):#function to move the turtle backward without drawing\n",
        "  penup()\n",
        "  backward(x)\n",
        "  pendown()\n",
        "\n",
        "moveb(200)#move the start of the bottom center of the circle left\n",
        "circle(50) #draw a circle with radius 50 and 6 sides\n",
        "for i in range(20):\n",
        "  if i %2 == 1:\n",
        "    movef(50)\n",
        "    dot(30, \"red\")\n",
        "hideturtle()\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 621
        },
        "id": "tEWch5jK3zRo",
        "outputId": "06835a41-3f72-490e-a554-54db7bb640df"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "      <svg width=\"800\" height=\"600\">  \n",
              "        <rect width=\"100%\" height=\"100%\" style=\"fill:white;stroke:;stroke-width:1\"/>\n",
              "        \n",
              "        \n",
              "        <path d=\"M 200.0 300.0 A 50 50 0 0 0 200.0 200.0\" stroke-linecap=\"round\" \n",
              "            fill=\"transparent\" fill-opacity=\"0\" style=\"stroke:black;stroke-width:1\"/><path d=\"M 200.0 200.0 A 50 50 0 0 0 200.0 300.0\" stroke-linecap=\"round\" \n",
              "            fill=\"transparent\" fill-opacity=\"0\" style=\"stroke:black;stroke-width:1\"/>\n",
              "        <circle cx=\"250.0\" cy=\"300.0\" r=\"15.0\" fill=\"red\" fill-opacity=\"1\" /><circle cx=\"300.0\" cy=\"300.0\" r=\"15.0\" fill=\"red\" fill-opacity=\"1\" /><circle cx=\"350.0\" cy=\"300.0\" r=\"15.0\" fill=\"red\" fill-opacity=\"1\" /><circle cx=\"400.0\" cy=\"300.0\" r=\"15.0\" fill=\"red\" fill-opacity=\"1\" /><circle cx=\"450.0\" cy=\"300.0\" r=\"15.0\" fill=\"red\" fill-opacity=\"1\" /><circle cx=\"500.0\" cy=\"300.0\" r=\"15.0\" fill=\"red\" fill-opacity=\"1\" /><circle cx=\"550.0\" cy=\"300.0\" r=\"15.0\" fill=\"red\" fill-opacity=\"1\" /><circle cx=\"600.0\" cy=\"300.0\" r=\"15.0\" fill=\"red\" fill-opacity=\"1\" /><circle cx=\"650.0\" cy=\"300.0\" r=\"15.0\" fill=\"red\" fill-opacity=\"1\" /><circle cx=\"700.0\" cy=\"300.0\" r=\"15.0\" fill=\"red\" fill-opacity=\"1\" />\n",
              "        \n",
              "        <g id=\"classic\" visibility=\"hidden\" transform=\"rotate(-90.0,700.0,300.0) translate(700.0, 300.0)\">\n",
              "<polygon points=\"-5,-4.5 0,-2.5 5,-4.5 0,4.5\" transform=\"skewX(0) scale(1,1)\" style=\"stroke:black;fill:black;stroke-width:1\" />\n",
              "</g>\n",
              "      </svg>\n",
              "    "
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from ColabTurtlePlus.Turtle import *\n",
        "def movef(x):#function to move the turtle forward without drawing\n",
        "  penup()\n",
        "  forward(x)\n",
        "  pendown()\n",
        "\n",
        "def gotoxy(x,y):\n",
        "  penup()\n",
        "  goto(x,y)\n",
        "  pendown()\n",
        "#Radius 50\n",
        "#First circle(lower left) has its bottom\n",
        "clearscreen()\n",
        "for i in range(3):\n",
        "  circle(30)\n",
        "  forward(30)\n",
        "gotoxy(0,30)\n",
        "for i in range(3):\n",
        "  circle(30)\n",
        "  movef(30)\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 621
        },
        "collapsed": true,
        "id": "n_0-BPS4Aaa1",
        "outputId": "f73ab300-3963-4795-9f31-30b3314e82d4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "      <svg width=\"800\" height=\"600\">  \n",
              "        <rect width=\"100%\" height=\"100%\" style=\"fill:white;stroke:;stroke-width:1\"/>\n",
              "        \n",
              "        \n",
              "        <path d=\"M 400.0 300.0 A 30 30 0 0 0 400.0 240.0\" stroke-linecap=\"round\" \n",
              "            fill=\"transparent\" fill-opacity=\"0\" style=\"stroke:black;stroke-width:1\"/><path d=\"M 400.0 240.0 A 30 30 0 0 0 400.0 300.0\" stroke-linecap=\"round\" \n",
              "            fill=\"transparent\" fill-opacity=\"0\" style=\"stroke:black;stroke-width:1\"/><line x1=\"400.0\" y1=\"300.0\" x2=\"430.0\" y2=\"300.0\" stroke-linecap=\"round\" style=\"stroke:black;stroke-width:1\" /><path d=\"M 430.0 300.0 A 30 30 0 0 0 430.0 240.0\" stroke-linecap=\"round\" \n",
              "            fill=\"transparent\" fill-opacity=\"0\" style=\"stroke:black;stroke-width:1\"/><path d=\"M 430.0 240.0 A 30 30 0 0 0 430.0 300.0\" stroke-linecap=\"round\" \n",
              "            fill=\"transparent\" fill-opacity=\"0\" style=\"stroke:black;stroke-width:1\"/><line x1=\"430.0\" y1=\"300.0\" x2=\"460.0\" y2=\"300.0\" stroke-linecap=\"round\" style=\"stroke:black;stroke-width:1\" /><path d=\"M 460.0 300.0 A 30 30 0 0 0 460.0 240.0\" stroke-linecap=\"round\" \n",
              "            fill=\"transparent\" fill-opacity=\"0\" style=\"stroke:black;stroke-width:1\"/><path d=\"M 460.0 240.0 A 30 30 0 0 0 460.0 300.0\" stroke-linecap=\"round\" \n",
              "            fill=\"transparent\" fill-opacity=\"0\" style=\"stroke:black;stroke-width:1\"/><line x1=\"460.0\" y1=\"300.0\" x2=\"490.0\" y2=\"300.0\" stroke-linecap=\"round\" style=\"stroke:black;stroke-width:1\" /><path d=\"M 400.0 270.0 A 30 30 0 0 0 400.0 210.0\" stroke-linecap=\"round\" \n",
              "            fill=\"transparent\" fill-opacity=\"0\" style=\"stroke:black;stroke-width:1\"/><path d=\"M 400.0 210.0 A 30 30 0 0 0 400.0 270.0\" stroke-linecap=\"round\" \n",
              "            fill=\"transparent\" fill-opacity=\"0\" style=\"stroke:black;stroke-width:1\"/><path d=\"M 430.0 270.0 A 30 30 0 0 0 430.0 210.0\" stroke-linecap=\"round\" \n",
              "            fill=\"transparent\" fill-opacity=\"0\" style=\"stroke:black;stroke-width:1\"/><path d=\"M 430.0 210.0 A 30 30 0 0 0 430.0 270.0\" stroke-linecap=\"round\" \n",
              "            fill=\"transparent\" fill-opacity=\"0\" style=\"stroke:black;stroke-width:1\"/><path d=\"M 460.0 270.0 A 30 30 0 0 0 460.0 210.0\" stroke-linecap=\"round\" \n",
              "            fill=\"transparent\" fill-opacity=\"0\" style=\"stroke:black;stroke-width:1\"/><path d=\"M 460.0 210.0 A 30 30 0 0 0 460.0 270.0\" stroke-linecap=\"round\" \n",
              "            fill=\"transparent\" fill-opacity=\"0\" style=\"stroke:black;stroke-width:1\"/>\n",
              "        \n",
              "        \n",
              "        <g id=\"classic\" visibility=\"visible\" transform=\"rotate(-90.0,490.0,270.0) translate(490.0, 270.0)\">\n",
              "<polygon points=\"-5,-4.5 0,-2.5 5,-4.5 0,4.5\" transform=\"skewX(0) scale(1,1)\" style=\"stroke:black;fill:black;stroke-width:1\" />\n",
              "</g>\n",
              "      </svg>\n",
              "    "
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "5DOnVXKRB9Q7"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}